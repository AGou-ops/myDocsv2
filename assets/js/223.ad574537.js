(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{855:function(s,n,a){"use strict";a.r(n);var t=a(6),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"haproxy-配置详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#haproxy-配置详解"}},[s._v("#")]),s._v(" HAProxy 配置详解")]),s._v(" "),a("p",[s._v("完整配置选项参考:"),a("a",{attrs:{href:"./configuration.txt"}},[s._v("configuration.txt")])]),s._v(" "),a("h2",{attrs:{id:"配置详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置详解"}},[s._v("#")]),s._v(" 配置详解")]),s._v(" "),a("h3",{attrs:{id:"配置文件格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件格式"}},[s._v("#")]),s._v(" 配置文件格式")]),s._v(" "),a("p",[s._v("haproxy 配置中分成五部分内容，分别如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("global")]),s._v("：  设置全局配置参数，属于进程的配置，通常是和操作系统相关。")]),s._v(" "),a("li",[a("code",[s._v("defaults")]),s._v("：配置默认参数，"),a("strong",[s._v("这些参数可以被用到frontend，backend，Listen组件")]),s._v("；")]),s._v(" "),a("li",[a("code",[s._v("frontend")]),s._v("：接收请求的前端虚拟节点，Frontend可以更加规则直接指定具体使用后端的backend；")]),s._v(" "),a("li",[a("code",[s._v("backend")]),s._v("：后端服务集群的配置，是真实服务器，一个Backend对应一个或者多个实体服务器；")]),s._v(" "),a("li",[a("code",[s._v("Listen")]),s._v(" ：frontend和backend的组合体。")])]),s._v(" "),a("p",[s._v("时间格式:")]),s._v(" "),a("ul",[a("li",[s._v("us: 微秒(microseconds)，即1/1000000秒；")]),s._v(" "),a("li",[s._v("ms: 毫秒(milliseconds)，即1/1000秒；")]),s._v(" "),a("li",[s._v("s: 秒(seconds)；")]),s._v(" "),a("li",[s._v("m: 分钟(minutes)；")]),s._v(" "),a("li",[s._v("h：小时(hours)；")]),s._v(" "),a("li",[s._v("d: 天(days)；")])]),s._v(" "),a("h3",{attrs:{id:"global全局配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global全局配置"}},[s._v("#")]),s._v(" global全局配置")]),s._v(" "),a("p",[s._v("“global”配置中的参数为进程级别的参数，且通常与其运行的OS相关。")]),s._v(" "),a("ul",[a("li",[s._v("进程管理及安全相关的参数")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("   - "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chroot")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("jail dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：修改haproxy的工作目录至指定的目录并在放弃权限之前执行chroot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("操作，可以提升haproxy的安全级别，不过需要注意的是要确保指定的目录为空目录且任何用户均不能有写权限；\n   - daemon：让haproxy以守护进程的方式工作于后台，其等同于“-D”选项的功能，当然，也可以在命令行中以“-db”选项将其禁用；\n   - gid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：以指定的GID运行haproxy，建议使用专用于运行haproxy的GID，以免因权限问题带来风险；\n   - group "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：同gid，不过指定的组名；\n   - log  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("address"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("facility"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("max level "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("min level"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：定义全局的syslog服务器，最多可以定义两个；\n   - log-send-hostname "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：在syslog信息的首部添加当前主机名，可以为“string”指定的名称，也可以缺省使用当前主机名；\n   - nbproc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：指定启动的haproxy进程个数，只能用于守护进程模式的haproxy；默认只启动一个进程，鉴于调试困难等多方面的原因，一般只在单进程仅能打开少数文件描述符的场景中才使用多进程模式；\n   - pidfile：\n   - uid：以指定的"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v("身份运行haproxy进程；\n   - ulimit-n：设定每进程所能够打开的最大文件描述符数目，默认情况下其会自动进行计算，因此不推荐修改此选项；\n   - user：同uid，但使用的是用户名；\n   - stats：\n   - node：定义当前节点的名称，用于HA场景中多haproxy进程共享同一个IP地址时；\n   - description：当前实例的描述信息；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("性能调整相关的参数")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("   - maxconn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定每个haproxy进程所接受的最大并发连接数，其等同于命令行选项“-n”；“ulimit -n”自动计算的结果正是参照此参数设定的；\n   - maxpipes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：haproxy使用pipe完成基于内核的tcp报文重组，此选项则用于设定每进程所允许使用的最大pipe个数；每个pipe会打开两个文件描述符，因此，“ulimit -n”自动计算时会根据需要调大此值；默认为maxconn/4，其通常会显得过大；\n   - noepoll：在Linux系统上禁用epoll机制；\n   - nokqueue：在BSE系统上禁用kqueue机制；\n   - nopoll：禁用poll机制；\n   - nosepoll：在Linux禁用启发式epoll机制；\n   - nosplice：禁止在Linux套接字上使用内核tcp重组，这会导致更多的recv/send系统调用；不过，在Linux "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.6")]),s._v(".25-28系列的内核上，tcp重组功能有bug存在；\n   - spread-checks "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" percent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：在haproxy后端有着众多服务器的场景中，在精确的时间间隔后统一对众服务器进行健康状况检查可能会带来意外问题；此选项用于将其检查的时间间隔长度上增加或减小一定的随机时长；\n   - tune.bufsize "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定buffer的大小，同样的内存条件小，较小的值可以让haproxy有能力接受更多的并发连接，较大的值可以让某些应用程序使用较大的cookie信息；默认为16384，其可以在编译时修改，不过强烈建议使用默认值；\n   - tune.chksize "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定检查缓冲区的大小，单位为字节；更大的值有助于在较大的页面中完成基于字符串或模式的文本查找，但也会占用更多的系统资源；不建议修改；\n   - tune.maxaccept "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定haproxy进程内核调度运行时一次性可以接受的连接的个数，较大的值可以带来较大的吞吐率，默认在单进程模式下为100，多进程模式下为8，设定为-1可以禁止此限制；一般不建议修改；\n   - tune.maxpollevents  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定一次系统调用可以处理的事件最大数，默认值取决于OS；其值小于200时可节约带宽，但会略微增大网络延迟，而大于200时会降低延迟，但会稍稍增加网络带宽的占用量；\n   - tune.maxrewrite "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定为首部重写或追加而预留的缓冲空间，建议使用1024左右的大小；在需要使用更大的空间时，haproxy会自动增加其值；\n   - tune.rcvbuf.client "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：\n   - tune.rcvbuf.server "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：设定内核套接字中服务端或客户端接收缓冲的大小，单位为字节；强烈推荐使用默认值；\n   - tune.sndbuf.client：\n   - tune.sndbuf.server：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("Debug相关的参数")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("   - debug\n   - quiet\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("超时时长")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" http request ：在客户端建立连接但不请求数据时，关闭客户端连接\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" queue ：等待最大时长\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" connect： 定义haproxy将客户端请求转发至后端服务器所等待的超时时长\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" client：客户端非活动状态的超时时长  默认单位是毫秒\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" server：客户端与服务器端建立连接后，等待服务器端的超时时长，\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" http-keep-alive ：定义保持连接的超时时长\n- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" check：健康状态监测时的超时时间，过短会误判，过长资源消耗\n- maxconn :每个server最大的连接数\n \n- http-server-close "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 在使用长连接时，为了避免客户端超时没有关闭长连接，此功能可以使服务器端关闭长连接\n- redispatch： 在使用基于cookie定向时，一旦后端某一server宕机时，会将会话重新定向至某一上游服务器，必须使用 的选项\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("实现访问控制：")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("- http-request: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("层过滤\n- tcp-request content: tcp层过滤，四层过滤\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"综合配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合配置"}},[s._v("#")]),s._v(" 综合配置")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\nglobal   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局参数的设置")]),s._v("\n    log "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 local0 info\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# log语法：log <address_1>[max_level_1] # 全局的日志配置，使用log关键字，指定使用127.0.0.1上的syslog服务中的local0日志设备，记录日志等级为info的日志")]),s._v("\n    user haproxy\n    group haproxy\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置运行haproxy的用户和组，也可使用uid，gid关键字替代之")]),s._v("\n    daemon\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以守护进程的方式运行")]),s._v("\n    nbproc "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置haproxy启动时的进程数，根据官方文档的解释，我将其理解为：该值的设置应该和服务器的CPU核心数一致，即常见的2颗8核心CPU的服务器，即共有16核心，则可以将其值设置为：<=16 ，创建多个进程数，可以减少每个进程的任务队列，但是过多的进程数也可能会导致进程的崩溃。这里我设置为16")]),s._v("\n    maxconn "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义每个haproxy进程的最大连接数 ，由于每个连接包括一个客户端和一个服务器端，所以单个进程的TCP会话最大数目将是该值的两倍。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#ulimit -n 65536")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置最大打开的文件描述符数，在1.4的官方文档中提示，该值会自动计算，所以不建议进行设置")]),s._v("\n    pidfile /var/run/haproxy.pid\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义haproxy的pid ")]),s._v("\ndefaults "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认部分的定义")]),s._v("\n    mode http\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mode语法：mode {http|tcp|health} 。http是七层模式，tcp是四层模式，health是健康检测，返回OK")]),s._v("\n    log "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 local3 err\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用127.0.0.1上的syslog服务的local3设备记录错误信息")]),s._v("\n    retries "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为不可用")]),s._v("\n    option httplog\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求的，只记录“时间[Jan 5 13:23:46] 日志服务器[127.0.0.1] 实例名已经pid[haproxy[25218]] 信息[Proxy http_80_in stopped.]”，日志格式很简单。")]),s._v("\n    option redispatch\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证会话的SESSION持久性；而此时，如果后端的服务器宕掉了，但是客户端的cookie是不会刷新的，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常。")]),s._v("\n    option abortonclose\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接")]),s._v("\n    option dontlognull\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了探测该服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来")]),s._v("\n    option httpclose\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个参数我是这样理解的：使用该参数，每处理完一个request时，haproxy都会去检查http头中的Connection的值，如果该值不是close，haproxy将会将其删除，如果该值为空将会添加为：Connection: close。使每个客户端和服务器端在完成一次传输后都会主动关闭TCP连接。与该参数类似的另外一个参数是“option forceclose”，该参数的作用是强制关闭对外的服务通道，因为有的服务器端收到Connection: close时，也不会自动关闭TCP连接，如果客户端也不关闭，连接就会一直处于打开，直到超时。")]),s._v("\n    contimeout "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置成功连接到一台服务器的最长等待时间，默认单位是毫秒，新版本的haproxy使用timeout connect替代，该参数向后兼容")]),s._v("\n    clitimeout "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置连接客户端发送数据时的成功连接最长等待时间，默认单位是毫秒，新版本haproxy使用timeout client替代。该参数向后兼容")]),s._v("\n    srvtimeout "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置服务器端回应客户度数据发送的最长等待时间，默认单位是毫秒，新版本haproxy使用timeout server替代。该参数向后兼容")]),s._v("\n \nlisten status "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个名为status的部分")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("bind")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:1080\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义监听的套接字")]),s._v("\n    mode http\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义为HTTP模式")]),s._v("\n    log global\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 继承global中log的定义")]),s._v("\n    stats refresh 30s\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stats是haproxy的一个统计页面的套接字，该参数设置统计页面的刷新间隔为30s")]),s._v("\n    stats uri /admin?stats\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置统计页面的uri为/admin?stats")]),s._v("\n    stats realm Private lands\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置统计页面认证时的提示内容")]),s._v("\n    stats auth admin:password\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置统计页面认证的用户和密码，如果要设置多个，另起一行写入即可")]),s._v("\n    stats hide-version\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 隐藏统计页面上的haproxy版本信息")]),s._v("\n \nfrontend http_80_in "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个名为http_80_in的前端部分")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("bind")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:80\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# http_80_in定义前端部分监听的套接字")]),s._v("\n    mode http\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义为HTTP模式")]),s._v("\n    log global\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 继承global中log的定义")]),s._v("\n    option forwardfor\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP")]),s._v("\n    acl static_down nbsrv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("static_server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" lt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个名叫static_down的acl，当backend static_sever中存活机器数小于1时会被匹配到")]),s._v("\n    acl php_web url_reg /*.php$\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#acl php_web path_end .php")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个名叫php_web的acl，当请求的url末尾是以.php结尾的，将会被匹配到，上面两种写法任选其一")]),s._v("\n    acl static_web url_reg /*."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("css"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("jpg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("png"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("jpeg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("js"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("gif"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("$\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#acl static_web path_end .gif .png .jpg .css .js .jpeg")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义一个名叫static_web的acl，当请求的url末尾是以.css、.jpg、.png、.jpeg、.js、.gif结尾的，将会被匹配到，上面两种写法任选其一")]),s._v("\n    use_backend php_server "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" static_down\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果满足策略static_down时，就将请求交予backend php_server")]),s._v("\n    use_backend php_server "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" php_web\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果满足策略php_web时，就将请求交予backend php_server")]),s._v("\n    use_backend static_server "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" static_web\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果满足策略static_web时，就将请求交予backend static_server")]),s._v("\n \nbackend php_server "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#定义一个名为php_server的后端部分")]),s._v("\n    mode http\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置为http模式")]),s._v("\n    balance "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置haproxy的调度算法为源地址hash")]),s._v("\n    cookie SERVERID\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许向cookie插入SERVERID，每台服务器的SERVERID可在下面使用cookie关键字定义")]),s._v("\n    option httpchk GET /test/index.php\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启对后端服务器的健康检测，通过GET /test/index.php来判断后端服务器的健康情况")]),s._v("\n    server php_server_1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.12")]),s._v(".25.68:80 cookie "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" check inter "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" rise "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" fall "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weight "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    server php_server_2 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.12")]),s._v(".25.72:80 cookie "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" check inter "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" rise "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" fall "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weight "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    server php_server_bak "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.12")]),s._v(".25.79:80 cookie "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" check inter "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" rise "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" fall "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" backup\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# server语法：server [:port] [param*] # 使用server关键字来设置后端服务器；为后端服务器所设置的内部名称[php_server_1]，该名称将会呈现在日志或警报中、后端服务器的IP地址，支持端口映射[10.12.25.68:80]、指定该服务器的SERVERID为1[cookie 1]、接受健康监测[check]、监测的间隔时长，单位毫秒[inter 2000]、监测正常多少次后被认为后端服务器是可用的[rise 3]、监测失败多少次后被认为后端服务器是不可用的[fall 3]、分发的权重[weight 2]、最后为备份用的后端服务器，当正常的服务器全部都宕机后，才会启用备份服务器[backup]")]),s._v("\n \nbackend static_server\n    mode http\n    option httpchk GET /test/index.html\n    server static_server_1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.12")]),s._v(".25.83:80 cookie "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" check inter "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" rise "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" fall "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br")])]),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[s._v("#")]),s._v(" 参考链接")]),s._v(" "),a("ul",[a("li",[s._v("haproxy官方中文入门文档教程(mage):https://blog.51cto.com/mageedu/1744420")]),s._v(" "),a("li",[s._v("csdn@Resines:https://blog.csdn.net/genglei1022/article/details/83374188")])])])}),[],!1,null,null,null);n.default=e.exports}}]);