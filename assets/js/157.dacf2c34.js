(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{789:function(s,a,t){"use strict";t.r(a);var n=t(6),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" DockerFile")]),s._v(" "),t("h2",{attrs:{id:"dockerfile-常用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-常用指令"}},[s._v("#")]),s._v(" DockerFile 常用指令")]),s._v(" "),t("p",[t("strong",[s._v("FROM")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("* 可以从DockHub中拉取指定镜像"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("默认"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，也可以拉取第三方镜像仓库的镜像，或者直接拉取本地已经制作好的镜像\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("MAINTAINER")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例子：")]),s._v("\nMAINTAINER "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"suofeiya <suofeiyaxx@gmail.com>"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("LABEL")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法：")]),s._v("\nLABEL "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例子：")]),s._v("\nLABEL "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("maintainer")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"suofeiya <suofeiyaxx@gmail.com>"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("comment")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"something here"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n* 注意： LABEL 值如果中包含空格，需要使用引号和反斜杠\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("RUN")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("RUN 指令：用于指定** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build **过程中要运行的命令。\n 语法格式：\n  RUN "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 或\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# <command>通常是一个shell命令，且以"/bin/sh -c" 来运行它，这意味着此进程在容器中的PID号不为1，不能接收UNIX信号，因此，当使用 docker stop 命令来停止容器时，此进程接收不到SIGTERM信号')]),s._v("\n  RUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<executeable>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  RUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/bash"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<executeable>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n         \n 例如：\n     RUN yum "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" iproute nginx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" yum clean all\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("CMD")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("CMD 指令：类似于 RUN 指令，用于运行程序，但二者运行的时间点不同；CMD 在** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run **时运行，而非** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build **阶段.\nCMD 指令的首要目的在于为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束\n注意: CMD 指令指定的程序可被** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run **命令行参数中指定要运行的程序所覆盖。\n 语法格式：\n CMD "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 或\n CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<executeable>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  注意：该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n注意：如果 dockerfile 中如果存在多个CMD指令，仅最后一个生效\n     \n 例如：\n         CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/sbin/httpd"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/httpd/conf/httpd.conf"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("ENTRYPOINT")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ENTRYPOINT 指令：类似于 CMD 指令，但其不会被** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run **的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序；但是, 如果运行** "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run **时使用了 --entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序\n 语法格式：\n ENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 或\n ENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<executeable>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n         \n 例如：\n     CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n     ENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"top"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n注意：一个dockefile中可以有多个 ENTRYPOINT ，但仅有最后以一个ENTRYPOINT生效.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("blockquote",[t("p",[t("strong",[t("code",[s._v("ENTRYPOINT")]),s._v(" 与 "),t("code",[s._v("CMD")]),s._v(" 区别？")])]),s._v(" "),t("p",[s._v("如： "),t("code",[s._v('FROM busybox ENTRYPOINT ["top", "-b"] CMD ["-c"]')]),s._v("       把可能需要变动的参数写到 CMD 里面。然后你可以在** docker run **里指定参数，这样 CMD 里的参数(这里是-c) 就会被覆盖掉而 ENTRYPOINT 里的不被覆盖。")]),s._v(" "),t("p",[t("strong",[s._v("注意")]),s._v("： ENTRYPOINT有两种写法，第二种(shell form)会屏蔽掉 docker run 时后面加的命令和 CMD 里的参数")])]),s._v(" "),t("p",[t("strong",[s._v("EXPOSE")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("EXPOSE "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PORT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PROTOCOL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暴露端口，可以指定协议(可省略)")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("ADD")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 其中，<src>可以是压缩包类型，也可以是url")]),s._v("\n\n* 需要注意的一点：\n\t  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" 官方建议我们当需要从远程复制文件时，最好使用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" 或 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" 命令来代替 ADD 命令。原因是，当使用 ADD 命令时，会创建更多的镜像层，当然镜像的 文件大小 也会更大，例如：\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 官方不建议使用的方法")]),s._v("\nADD http://example.com/big.tar.xz /usr/src/things/\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xJf /usr/src/things/big.tar.xz -C /usr/src/things\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" -C /usr/src/things all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 官方建议的使用方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果使用下面的命令，不仅镜像的层数减少，而且镜像中也不包含 big.tar.xz 文件")]),s._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /usr/src/things "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -SL http://example.com/big.tar.xz "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xJC /usr/src/things "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" -C /usr/src/things all\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("COPY")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("COPY "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dest"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\nCOPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<src>"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<dest>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n* 注意：dest目标目录最好使用绝对路径，若要使用相对路径，则需要设置workdir工作目录路，另外如果路径中包含有空格字符，应当使用第二种格式\n\n文件复制准则：\n* "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("应当是build上下文中的路径，不能是其父目录或者其他上级目录中的文件\n* 如果"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("为目录，则该目录下的所有文件均会被复制，但"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("目录本身不会被复制\n* 如果指定了多个"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("目录，或者使用了文件通配符，则"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dest"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("目标目录在文件夹结尾需加入"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),s._v("\n* 如若"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dest"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("目录在容器中不存在，则build构建时会自动创建，包含其父目录\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[t("strong",[t("code",[s._v("ADD")]),s._v("命令和"),t("code",[s._v("COPY")]),s._v("命令的区别？")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("COPY")]),s._v("命令可以用于 "),t("code",[s._v("multistage")]),s._v(" 场景下，而ADD命令不可以")]),s._v(" "),t("li",[t("code",[s._v("ADD")]),s._v("命令可以传入压缩包文件，并自动解压至指定位置，也可以传入URL")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("docker的 "),t("code",[s._v("multistage")]),s._v(" 场景：同一个"),t("code",[s._v("DockerFile")]),s._v("文件中可以存在多个FROM指令，每个"),t("code",[s._v("FROM")]),s._v("指令代表stage的开始.")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用无命名的stage，加入以下参数")]),s._v("\n--from"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用命名的stage")]),s._v("\nFROM busybox as builder\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nFROM centos\nCOPY --from builder /"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v("/TO/FILE ./\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("注意：旧版本的 docker 是不支持 "),t("code",[s._v("multi-stage")]),s._v(" 的，只有 "),t("code",[s._v("17.05")]),s._v("以及之后的版本才开始支持")])]),s._v(" "),t("p",[t("strong",[s._v("VOLUME")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 格式：")]),s._v("\nVOLUME "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<路径1>"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<路径2>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \nVOLUME "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("路径"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" \n* 注意：通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("USER")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 格式：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("GID"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作用：指定运行时的用户名或UID，后续的RUN也会使用指定的用户，当服务不需要管理权限时，可以通过该命令指定运行用户，并且可以在之前创建所需要的用户")]),s._v("\n\n* 注意：当要临时获取管理权限时，可以使用gosu，而不推荐使用sudo\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("WORKDIR")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 格式：")]),s._v("\nWORKDIR /"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v("/TO/DIR\n\n* 注意：一个DockerFile中可以指定多个WORKDIR，后续命令如果是相对目录，则会基于之前指定的路径，例如"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("WORKDiR /dir1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" WORKDIR dir2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" WORKDIR dir3 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" RUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("，其结果是"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/dir1/dir2/dir3"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("ONBUILD")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用于在DockerFile中定义一个触发器，当一个镜像被当做基础镜像，也就是FROM对象时，就会触发base image中的ONBUILD指令所定义的触发器")]),s._v("\n\n* 注意：使用包含ONBUILD的指令的DockFIle构建的镜像时，应当使用特殊的标签，例如busybox-onbuild\n在ONBUILD命令中使用COPY命令和ADD命令时要注意，如果在构建的上下文中缺少指定的源文件时会报错\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("ARG")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法：")]),s._v("\nARG NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("default-value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作用：ARG 指令使用 --build-arg = 标志定义一个变量，用户可以使用 docker build 命令在构建时将该变量传递给构建器。如果用户指定了未在 Dockerfile 中定义的构建参数，则构建会输出告警")]),s._v("\n* 可以在同一个DockerFile中指定多个 ARG ，ARG可以有默认值，当容器构建时未指定变量的默认值，将使用dockerfile中的默认值\n* 注意：ARG 变量定义从 Dockerfile 中定义的行开始生效，而不是从命令行或其它地方的参数使用，简单来说ARG变量定义可以先使用后声明"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("大概这个意思吧"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，另外，使用ENV 指令定义的环境变量始终覆盖同名的 ARG 指令\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 预定义的ARG，可以直接在DockerFile中使用，而无需相应的ARG指令")]),s._v("\nHTTP_PROXY,http_proxy,HTTPS_PROXY,https_proxy,FTP_PROXY,ftp_proxy,NO_PROXY,no_proxy\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如何使用？直接在命令行使用即可")]),s._v("\n--build-arg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("varname"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("ENV")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 两种格式")]),s._v("\nENV ENV_NAME VARIABLE\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定单个环境变量")]),s._v("\nENV "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ENV_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"VARIABLE"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 传递多个环境变量")]),s._v("\n* 通过ENV定义的环境变量，可以在dockerfile被后面的所有指令中使用，但不能被CMD指令使用，也不能被docker run 的命令参数引用，使用ENV 指令定义的环境变量始终覆盖同名的 ARG 指令\n* 如果需要在容器运行时使用环境变量，在 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run 时使用 -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ENV_NAME=VARIABLE"')]),s._v(" 即可\n\n* 注意：与 ARG 指令不同，ENV 值始终保留在构建的镜像中\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("HEALTHCHECK")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 两种格式")]),s._v("\nHEALTHCHECK "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CMD COMMAND\nHEALTHCHECK NODE\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁止从父镜像继承的HEALTHCHECK生效")]),s._v("\n\n* 可用OPTOPNS\n--interval"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DURATION"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default:30s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间隔(s秒、m分钟、h小时)，从容器运行起来开始计时interval秒（或者分钟小时）进行第一次健康检查，随后每间隔interval秒进行一次健康检查；还有一种特例请看timeout解析。")]),s._v("\n--start-period"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DURATION"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default:0s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  启动时间， 默认 0s， 如果指定这个参数， 则必须大于 0s ；--start-period 为需要启动的容器提供了初始化的时间段， 在这个时间段内如果检查失败， 则不会记录失败次数。 如果在启动时间内成功执行了健康检查， 则容器将被视为已经启动， 如果在启动时间内再次出现检查失败， 则会记录失败次数。")]),s._v("\n--timeout"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("DURATION"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default:30s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行command需要时间，比如curl 一个地址，如果超过timeout秒则认为超时是错误的状态，此时每次健康检查的时间是timeout+interval秒。")]),s._v("\n--retries"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("N"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default:3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连续检查retries次，如果结果都是失败状态，则认为这个容器是unhealth的")]),s._v("\n\n* 容器退出状态码\n*  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("表示正常退出，1表示unhealthy，2表示reserved\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例子：")]),s._v("\nHEALTHCHECK --interval"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("4m --timeout"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3s "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" \nCMD "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -f http://localhost "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n* 总结：当容器启动之后，首先间隔interval秒然后进行健康检查，如果一个检查所花的时间超过了timeout秒，那么就认为这次检查失败了，如果连续retries次失败，就认为此容器状态为unhealthy\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用例子：")]),s._v("\nHEALTHCHECK –interval"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("10s –timeout"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3s –retries"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" CMD "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" http://localhost\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  可能会出现curl这个地址3秒内没响应则认为失败，然后再开始interval的时间进行下次检测，最后显示unhealthy的状态应该是39s")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取指定容器的健康状态")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect –format ‘【【json .State.Health.Status】】’ 41f1414fab75\n\n* 注意：当dockfile指定多个 HEALTHCHECK 时，仅对最后一个 HEALTHCHECK 有效\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h2",{attrs:{id:"dockerfile-构建选项及技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建选项及技巧"}},[s._v("#")]),s._v(" DockerFile 构建选项及技巧")]),s._v(" "),t("p",[s._v("docker build用于使用 Dockerfile 创建镜像，下面是参数列表:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("--build-arg"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置镜像创建时的变量")]),s._v("\n--cpu-shares                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 cpu 使用权重")]),s._v("\n--cpu-period                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制 CPU CFS周期")]),s._v("\n--cpu-quota                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制 CPU CFS配额")]),s._v("\n--cpuset-cpus                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定使用的CPU id")]),s._v("\n--cpuset-mems                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定使用的内存 id")]),s._v("\n--disable-content-trust                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略校验，默认开启")]),s._v("\n-f                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定要使用的Dockerfile路径")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  例子：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -f /path/to/a/Dockerfile "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n--force-rm                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置镜像过程中删除中间容器")]),s._v("\n--isolation                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用容器隔离技术")]),s._v("\n--label"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置镜像使用的元数据")]),s._v("\n-m                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置内存最大值")]),s._v("\n--memory-swap                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 设置Swap的最大值为内存+swap，"-1"表示不限swap')]),s._v("\n--no-cache                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建镜像的过程不使用缓存")]),s._v("\n--pull                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 尝试去更新镜像的新版本")]),s._v("\n--quiet, -q                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安静模式，成功后只输出镜像 ID")]),s._v("\n--rm                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置镜像成功后删除中间容器")]),s._v("\n--shm-size                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置/dev/shm的大小，默认值是64M")]),s._v("\n--ulimit                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ulimit配置")]),s._v("\n--tag, -t                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 镜像的名字及标签，通常 name                # tag 或者 name 格式可以在一次构建中为一个镜像设置多个标签")]),s._v("\n--network                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认 default在构建期间设置RUN指令的网络模式")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("h3",{attrs:{id:"加速镜像构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加速镜像构建"}},[s._v("#")]),s._v(" 加速镜像构建")]),s._v(" "),t("p",[s._v("在使用 "),t("code",[s._v("COPY")]),s._v(" 和 "),t("code",[s._v("ADD")]),s._v(" 命令时，我们可以通过一些技巧来加速镜像的 build 过程。比如把那些最不容易发生变化的文件的拷贝操作放在较低的镜像层中，这样在重新 build 镜像时就会使用前面 build 产生的缓存，例如：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建文件夹中分别有 test.sh x1.sh x2.sh x3.sh 四个文件，其中 test.sh 文件不经常修改，而x1-3.sh经常有变动，所以将 test.sh 单独置于一个镜像层中，且放置于较低的镜像层中")]),s._v("\nWORKDIR /test\nCOPY test.sh "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\nCOPY x*.sh ./\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建时，当 x*.sh 发生变化而 test.sh 无变化时，重新构建镜像时会跳过 test.sh")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"dockerfile-最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-最佳实践"}},[s._v("#")]),s._v(" DockerFile 最佳实践")]),s._v(" "),t("p",[s._v("https://docs.docker.com/develop/develop-images/dockerfile_best-practices/")]),s._v(" "),t("p",[s._v("https://docs.docker.com/develop/dev-best-practices/")])])}),[],!1,null,null,null);a.default=e.exports}}]);